@model HealthInsurance.Controllers.PolicyIndexViewModel

<div class="container mx-auto p-4">
    <h1 class="text-5xl font-bold py-4 text-center">Policies</h1>

    <form method="get" asp-action="Index" class="max-w-md mx-auto my-4">
        <label for="default-search" class="mb-2 text-sm font-medium text-gray-900 sr-only dark:text-white">Search</label>
        <div class="relative">
            <div class="absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none">
                <svg class="w-4 h-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                    <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z" />
                </svg>
            </div>
            <input type="search" name="searchString" id="default-search" value="@Model.SearchString" class="block w-full p-4 ps-10 text-sm text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" placeholder="Search by policy name..." />
            <button type="submit" class="text-white absolute end-2.5 bottom-2.5 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Search</button>
        </div>
    </form>

    <div class="flex justify-end mb-4">
        <a href="@Url.Action("Create")" class="bg-green-500 text-white hover:bg-green-600 dark:bg-green-700 dark:hover:bg-green-800 rounded-md px-4 py-2">Create New Policy</a>
    </div>

    @if (Model.Policies.Any())
    {
        <table class="min-w-full bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md relative text-left">
            <thead class="bg-gray-600">
                <tr>
                    <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">Policy Name</th>
                    <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">Description</th>
                    <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">Amount</th>
                    <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">EMI</th>
                    <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">Company</th>
                    <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">Medicaid</th>
                    <th class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var policy in Model.Policies)
                {
                    <tr class="relative">
                        <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">@policy.PolicyName</td>
                        <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">@policy.PolicyDesc</td>
                        <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">@policy.PolicyAmount</td>
                        <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">@policy.EMI</td>
                        <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">@policy.Company.CompanyName</td>
                        <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700">@policy.Medicaid</td>
                        <td class="py-2 px-4 border-b border-gray-300 dark:border-gray-700 relative flex items-center justify-end">
                            <!-- Three dots icon (Vertical Ellipsis) -->
                            <button id="toggleButton-@policy.PolicyId" type="button" class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 w-10" onclick="toggleDropdown('dropdown-@policy.PolicyId')">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>

                            <!-- Dropdown menu -->
                            <div id="dropdown-@policy.PolicyId" class="transition-all duration-300 absolute right-0 mt-2 top-full w-40 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg z-10 opacity-0 hidden text-left overflow-hidden" onclick="event.stopPropagation();">
                                <a href="@Url.Action("Details", new { id = policy.PolicyId })" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600">Details</a>
                                <a href="@Url.Action("Edit", new { id = policy.PolicyId })" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600">Edit</a>
                                <a href="@Url.Action("Delete", new { id = policy.PolicyId })" class="block px-4 py-2 text-sm text-red-500 dark:text-red-400 hover:bg-red-100 dark:hover:bg-red-600 hover:text-white">Delete</a>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="text-center mt-4 text-gray-500 dark:text-gray-400 text-3xl font-bold">
            No policies found.
        </div>
    }

    <div class="mt-4 flex justify-center">
        <nav aria-label="Page navigation">
            <ul class="inline-flex items-center space-x-2">
                @if (Model.CurrentPage > 1)
                {
                    <li>
                        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = Model.CurrentPage - 1 })"
                           class="px-3 py-2 text-sm font-medium text-blue-600 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-100 dark:text-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700"
                           aria-label="Previous">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                }
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li>
                        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = i })"
                           class="px-3 py-2 text-sm font-medium @(Model.CurrentPage == i ? "text-white bg-blue-600 border border-blue-600 dark:bg-blue-500 dark:border-blue-500" : "text-gray-500 bg-white border border-gray-300 hover:bg-gray-100 dark:text-gray-400 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700") rounded-lg"
                           aria-label="@i">
                            @i
                        </a>
                    </li>
                }
                @if (Model.CurrentPage < Model.TotalPages)
                {
                    <li>
                        <a href="@Url.Action("Index", new { searchString = Model.SearchString, pageNumber = Model.CurrentPage + 1 })"
                           class="px-3 py-2 text-sm font-medium text-blue-600 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-100 dark:text-blue-500 dark:border-gray-700 dark:bg-gray-800 dark:hover:bg-gray-700"
                           aria-label="Next">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<script>
    function toggleDropdown(id) {
        const dropdown = document.getElementById(id);
        const isDropdownVisible = !dropdown.classList.contains('hidden');

        // Show the clicked dropdown if it was not already visible
        if (!isDropdownVisible) {
            dropdown.classList.remove('hidden');
            setTimeout(() => {
                dropdown.classList.remove('opacity-0');
            }, 100);
        }
    }

    // Optional: Close the dropdown if clicking outside
    document.addEventListener('click', function (event) {
        if (!event.target.closest('[id^="toggleButton"]') && !event.target.closest('[id^="dropdown-"]')) {
            document.querySelectorAll('[id^="dropdown-"]').forEach(dropdown => {
                dropdown.classList.add('opacity-0');
                setTimeout(() => {
                    dropdown.classList.add('hidden');
                }, 300)
            });
        }
    });
</script>
